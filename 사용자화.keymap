#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    behaviors {
    };

    combos {
        compatible = "zmk,combos";

        rightB {
            bindings = <&kp B>;
            key-positions = <46 47>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        LAYER0 {
            bindings = <
&gresc       &kp N1     &kp N2        &kp N3        &kp N4  &kp N5    &mmv MOVE_UP     &kp N6     &kp N7     &kp N8          &kp N9    &kp N0     &kp BACKSPACE
&kp TAB      &kp Q      &kp W         &kp E         &kp R   &kp T     &mmv MOVE_DOWN   &kp Y      &kp U      &kp I           &kp O     &kp P      &kp BSLH
&kp CAPS     &kp A      &kp S         &kp D         &kp F   &kp G     &mmv MOVE_LEFT   &kp H      &kp J      &kp K           &kp L     &kp SEMI   &kp APOS
&kp LSHFT    &kp Z      &kp X         &kp C         &kp V   &kp B     &mmv MOVE_RIGHT  &kp N      &kp M      &kp COMMA       &kp DOT   &kp FSLH   &kp RSHFT
&kp C_PAUSE  &kp LCTRL  &kp LEFT_GUI  &kp LEFT_ALT  &mo 1   &to 2     &mkp LCLK        &kp ENTER  &kp SPACE  &kp LANGUAGE_1  &kp RGUI  &kp RCTRL
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOLUME_UP C_VOL_DN>,
                <&inc_dec_kp 0 0>;

            display-name = "LAYER0";
        };

        LAYER1 {
            bindings = <
&kp F1           &kp F2           &kp F3           &kp F4           &kp F5           &kp F6             &kp UP     &kp F7      &kp F8      &kp F9    &kp F10    &kp F11           &kp F12
&trans           &trans           &trans           &trans           &trans           &trans             &kp DOWN   &kp PG_UP   &kp INS     &kp HOME  &kp PG_UP  &kp MINUS         &kp EQUAL
&trans           &rgb_ug RGB_EFF  &rgb_ug RGB_BRI  &rgb_ug RGB_SPI  &rgb_ug RGB_HUI  &rgb_ug RGB_SAI    &kp LEFT   &kp PG_DN   &kp DEL     &kp END   &kp PG_DN  &kp LEFT_BRACKET  &kp RIGHT_BRACKET
&rgb_ug RGB_TOG  &rgb_ug RGB_EFR  &rgb_ug RGB_BRD  &rgb_ug RGB_SPD  &rgb_ug RGB_HUD  &rgb_ug RGB_SAD    &kp RIGHT  &trans      &trans      &kp UP    &trans     &trans            &trans
&kp C_MUTE       &trans           &trans           &trans           &trans           &trans             &kp RET    &kp C_PREV  &kp C_NEXT  &kp LEFT  &kp DOWN   &kp RIGHT
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOLUME_UP C_VOL_DN>,
                <&inc_dec_kp 0 0>;

            display-name = "LAYER1";
            sensor-bindings = <&scroll_encoder>;
        };

        LAYER2 {
            bindings = <
&trans  &trans    &trans    &trans     &trans  &bl BL_TOG    &mmv MOVE_UP     &trans  &kp KP_NUM  &kp KP_SLASH  &kp KP_ASTERISK  &kp KP_MINUS  &trans
&trans  &trans    &kp UP    &trans     &trans  &trans        &mmv MOVE_DOWN   &trans  &kp KP_N7   &kp KP_N8     &kp KP_N9        &kp PLUS      &trans
&trans  &kp LEFT  &kp DOWN  &kp RIGHT  &trans  &trans        &mmv MOVE_LEFT   &trans  &kp KP_N4   &kp KP_N5     &kp KP_N6        &kp KP_EQUAL  &trans
&trans  &trans    &trans    &trans     &trans  &trans        &mmv MOVE_RIGHT  &trans  &kp KP_N1   &kp KP_N2     &kp KP_N3        &kp ENTER     &trans
&trans  &trans    &trans    &trans     &trans  &to 0         &mkp LCLK        &trans  &trans      &kp KP_N0     &kp KP_N0        &kp KP_DOT
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        LAYER3 {
            bindings = <
&out OUT_TOG  &bt BT_SEL 0    &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4      &mmv MOVE_UP     &trans  &trans  &trans     &trans      &trans       &trans
&trans        &trans          &trans        &trans        &trans        &bt BT_CLR_ALL    &mmv MOVE_DOWN   &trans  &trans  &trans     &trans      &trans       &trans
&trans        &trans          &trans        &trans        &trans        &bt BT_CLR        &mmv MOVE_LEFT   &trans  &trans  &trans     &trans      &trans       &trans
&trans        &trans          &trans        &trans        &trans        &trans            &mmv MOVE_RIGHT  &trans  &trans  &trans     &trans      &trans       &trans
&trans        &studio_unlock  &sys_reset    &bootloader   &trans        &to 0             &mkp LCLK        &trans  &trans  &soft_off  &sys_reset  &bootloader
            >;

            sensor-bindings = <&scroll_encoder>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        layer3 {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
